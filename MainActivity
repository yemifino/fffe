import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(new TestSurfaceView(this));
    }
    class TestSurfaceView extends SurfaceView implements SurfaceHolder.Callback{

        public TestSurfaceView(Context context) {
            super(context);
            getHolder().addCallback(this);
        }
public DrawThread drawThread;
        @Override
        public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
        }

        @Override
        public void surfaceCreated(SurfaceHolder holder) {

                drawThread = new DrawThread(getContext(),getHolder());
                drawThread.start();


        }


        @Override
        public void surfaceDestroyed(SurfaceHolder holder) {
drawThread.requestStop();
boolean retry =true;
while(retry){
    try {
        drawThread.join();
        retry = false;
    } catch (InterruptedException e) {
        e.printStackTrace();
    }

}

    }
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        drawThread.set(event.getX(),event.getY(),0);
        return super.onTouchEvent(event);
    }

}

 class DrawThread extends Thread {

     private SurfaceHolder surfaceHolder;

     private volatile boolean running = true;//флаг для остановки потока
     float x = -10000, y = -10000, r = 0;

     void set(float x, float y, float r) {
         this.x = x;
         this.y = y;
         this.r = r;

     }


     public DrawThread(Context context, SurfaceHolder surfaceHolder) {
         this.surfaceHolder = surfaceHolder;

     }

     public void requestStop() {
         running = false;
     }

     @Override
     public void run() {
         Paint paint = new Paint();
         paint.setColor(Color.RED);

         while (running) {
             Canvas canvas = surfaceHolder.lockCanvas();
             if (canvas != null) {
                 try {
                     canvas.drawColor(Color.GREEN);
                     canvas.drawCircle(x, y, r, paint);
                     // рисование на canvas
                 } finally {
                     surfaceHolder.unlockCanvasAndPost(canvas);
                 }
             }
             r += 5;
             try {
                 Thread.sleep(1000);
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
         }
     }
 }
}
